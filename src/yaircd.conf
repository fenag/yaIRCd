#yaircd.conf sample configuration file.
#This is how you can change yaIRCd's settings. Make sure you go through every setting and set it according to your needs.
 
#Every setting includes a brief description.
 
#For more information, take a look at: http://www.hyperrealm.com/libconfig/libconfig_manual.html


/* 
	serverinfo block
	This block contains information about the server, namely, its numeric, name and description.
*/
serverinfo = {
	# This server's ID. Each server in an IRC network must have a unique identifier corresponding to a positive integer >= 0 and <= 255
	serv_id = 0;
	
	# The server's name.
	serv_name = "starwars.development.yaircd.org";
	
	# Server's description
	serv_desc = "Luke, I am your father!";
	
	# Network name
	net_name = "yaIRCd";
	
	/* 
	   Server's certificate file. You are probably holding a self signed certificate, that is, you didn't buy a certificate from a CA authority.
	   If this is the case, we recommend using TLSA records on your DNS zone, so that IRC clients supporting DANE (Domain-based Authentication of Named Entities)
	   can verify that the certificate is genuine, even though it is self signed.
	   To generate a compatible hash of the certificate for the TLSA record, run this command:
		openssl x509 -noout -fingerprint -sha256 </path/to/certificate/file.pem | tr -d :
	   This will give you the hash for the certificate. Next, insert this certificate in a TLSA record for the DNS zone.
	   Registrars that do not directly support TLSA can be used; just use a generic TYPE52 record in the zone file, like this:
		_6697._tcp.irc  IN TYPE52 \# 35 030001insert_hash_here
	   Note that 030001 can be different; please refer to https://netfuture.ch/2013/06/how-to-create-dnssec-dane-tlsa-entries/ for more information
	   This example assumes that you'll be running the IRCd on port 6697, and that you hold a subdomain irc.something.tld
	   Furthermore, remember that DNS queries and replies are not necessarily authenticated. It makes no sense to use TLSA records without
	   activating DNSSEC for your domain. There is a lot of information about DNSSEC out there, just google it, and enable it for your domain. Otherwise,
	   an attacker can forge DNS replies and basically place anything in the TLSA field, rendering the certificate validation useless. In other words, the TLSA
	   method should be used with DNSSEC to ensure DNS queries and replies authentication and integrity.
	   As a final note, there are a few interesting points to mention:
		- IRC clients typically don't support certificate validation through TLSA. IRC clients must be compiled with DANE support. We believe this will be done by
		  default in the future, given that it is such a good extension to the security world. See http://ahf.me/articles/2013/09/14/enhancing-ssl-security-for-irc-dane-support/
		  to learn why DANE is important for IRC servers using self signed certificates, and to learn how to compile irssi with DANE support. As of this writing, yaIRCd's development
		  team has never heard about any other IRC client offering DANE support (and DANE support is experimental in irssi at the moment).
		- Your DNS registrar must support DNSSEC, or you're out of luck.
		- The client's dns servers must support DNSSEC, and the client's machine must support it too.
		
	   DNSSEC is not widely deployed, nor is it widely known. As a consequence, this method cannot be fully relied on as an alternative to CA certification, but it does add an extra layer security
	   when dealing with self signed certificates. It is definitely better than what most IRC server administrators use.
	   
	  Lots of IRC daemons refuse to implement SSL because of the false sense of security it transmits to the users, since self signed certificates are vulnerable to Man In The Middle Attacks
	  (see https://www.quakenet.org/articles/99-trust-is-not-transitive-or-why-irc-over-ssl-is-pointless)
	  We believe this will change in the future. The use of DNSSEC together with DANE shall grow in time and evolve to a basic protocol to provide the desired security in IRC networks.
	  Of course, you can always buy a certificate from a CA and forget about DNSSEC, TLSA, and all of that, but the IRC community has historically been resistant to the concept of paying someone
	  to sign a certificate :)
	  
	  You can generate a pair of private key / public key certificate with this command:
		openssl req -x509 -newkey rsa:YYYY -keyout private_key.pem -out certificate.pem -days XXX
	  Where YYYY is the key's length (2048, 4096, ...), and XXX is the duration.
	*/
	certificate = "cert.pem";
	
	# Server's private key			
	pkey = "pri.pem";
	
	/*
	  admin block
	  
	  This block contains informations about the server's administrator.
	  It is important to provide real, meaningful data, so that users can contact
	  someone in case of need.
	  
	*/
	admin = {
		# Administrator's name
		name = "Mr. Franz Miquelini";
		
		# Administrator's IRC nickname
		nick = "cr4zy_c0d3r";
		
		# ... and his email
		email = "no-spam@nighttrain.com";
	};
	
	/*
		cloak block
		
		This block defines the server's cloak keys. Cloaking keys are used as salt to compute a user's cloaked host.
		A cloaked host is a way to protect user's privacy by hiding their real IP or hostname behind a hash, but still allowing regular channel operators to ban whole IP ranges. 
		To calculate such a hash, and to better resist to brute force attacks and make it safe, a set of 3 different salt keys are used. These keys should be kept secret, and must be difficult to guess.
		We recommend choosing keys with lower and upper case letters, and some digits. These keys should be different and ideally randomly generated. Please choose keys with at least 5 alphanumeric characters,
		and at most 100 aplhanumeric characters.
		Another setting to choose is the net prefix. This is not related to security, it is just a little setting you can play with for fun. It's a prefix that will be attached to every cloaked hostname on a user.
		For example, if a user's cloaked host is "C4FEA00B.dsl.telepac.pt" and the next prefix is "xp", then the final result it "xp-C4FEA00B.dsl.telepac.pt".
		The net prefix is only prepended to IPs for which a reverse hostname lookup was successfull.
		
		THIS IS REALLY IMPORTANT: It is imperative that the net prefix and the cloak keys are the same in every server belonging to an IRC network. Channel bans will not work properly if the keys are different.
		
	*/
	cloak = {
		net_prefix = "sw"; # Star wars!
		key1 = "aldkfghAVAVDHFNGJNmddjfj3356778498";
		key2 = "LLDHFHJTMGUVMq1112fifhfJAH";
		key3 = "IWMRFHFGmdhdfjdjSUJSNj12335434564JFJFNGKGkfdf0012L";
	};
	
	/*
		Timeout block
		
		This block defines the timeout value. The IRCd will send a PING request every "ping_freq" seconds. If no reply is heard back within "timeout" seconds,
		the client session is terminated.
		
		The timeout values should be given as floating-point numbers. We recommend indicating a ping frequency of at least 1 minute.
		
	*/
	timeouts = {
		ping_freq = 60.0; # 1 minute
		timeout = 10.0; # 10 seconds to receive PONG, or you're dead!
	};
};

/*
	listen block
	This block lists ports and IPs that shall be opened for new connections.
	Use 0.0.0.0 to listen on every IP.
	Ports should be greater than 1024 (ports below 1024 are for privileged users).
	
*/
listen = {
	sockets = {
			standard = {
				# How many clients are allowed to be waiting while the main process is creating a thread for a freshly arrived user. 
				# This can be safely incremented to 5
				max_hangup_clients = 5
				ip = "0.0.0.0";
				port = 6667;
			}
			secure = {
				# How many clients are allowed to be waiting while the main process is creating a thread for a freshly arrived user. 
				# This can be safely incremented to 5
				max_hangup_clients = 5
				ip = "0.0.0.0";
				port = 6697;
			}};  
};

/*
	files block
	
	Misc files used by the server.

*/
files = {
	/* The MOTD file. The IRC protocol mandates that this file be sent to a client with lines holding at most 80 characters.
	   Thus, no matter how ugly your MOTD file is, it will always be read in chunks of 80 characters. However, line merging is not
	   made, i.e., if a line is 90 characters and the following line is 70, you don't get two lines of 80 characters, you get a line
	   of 80 characters, a line of 10 characters, and then a line of 70 characters.
	 */
	motd = "yaircd.motd";
};

/*
	channel block
	
	This block configures every setting related to channels management.
	
*/
channels = {
	# How many channels a client is allowed to sit in simultaneously
	chanlimit = 15;
};
